{"version":3,"file":"esm-DiJduMOq.js","names":["isCompatible","__spreadArray","__read","DiagComponentLogger","__read","__spreadArray","API_NAME","DiagAPI","__read","BaggageImpl","diag","BaseContext","context","DiagConsoleLogger","b","NoopMeter","NoopMetric","NoopCounterMetric","NoopUpDownCounterMetric","NoopGaugeMetric","NoopHistogramMetric","NoopObservableMetric","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","__read","__spreadArray","NoopContextManager","API_NAME","ContextAPI","context","NonRecordingSpan","context","NoopTracer","context","ProxyTracer","context","NoopTracerProvider","ProxyTracerProvider","TraceStateImpl","NoopMeterProvider","API_NAME","MetricsAPI","NoopTextMapPropagator","context","context","API_NAME","PropagationAPI","context","TraceAPI"],"sources":["../node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js","../node_modules/@opentelemetry/api/build/esm/platform/node/index.js","../node_modules/@opentelemetry/api/build/esm/platform/index.js","../node_modules/@opentelemetry/api/build/esm/version.js","../node_modules/@opentelemetry/api/build/esm/internal/semver.js","../node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","../node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","../node_modules/@opentelemetry/api/build/esm/diag/types.js","../node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","../node_modules/@opentelemetry/api/build/esm/api/diag.js","../node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","../node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","../node_modules/@opentelemetry/api/build/esm/baggage/utils.js","../node_modules/@opentelemetry/api/build/esm/context/context.js","../node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js","../node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js","../node_modules/@opentelemetry/api/build/esm/metrics/Metric.js","../node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","../node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","../node_modules/@opentelemetry/api/build/esm/api/context.js","../node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","../node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","../node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","../node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","../node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","../node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","../node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","../node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","../node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","../node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","../node_modules/@opentelemetry/api/build/esm/trace/status.js","../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js","../node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js","../node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js","../node_modules/@opentelemetry/api/build/esm/context-api.js","../node_modules/@opentelemetry/api/build/esm/diag-api.js","../node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js","../node_modules/@opentelemetry/api/build/esm/api/metrics.js","../node_modules/@opentelemetry/api/build/esm/metrics-api.js","../node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","../node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","../node_modules/@opentelemetry/api/build/esm/api/propagation.js","../node_modules/@opentelemetry/api/build/esm/propagation-api.js","../node_modules/@opentelemetry/api/build/esm/api/trace.js","../node_modules/@opentelemetry/api/build/esm/trace-api.js","../node_modules/@opentelemetry/api/build/esm/index.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport var _globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './globalThis';\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.9.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport var DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < DiagLogLevel.NONE) {\n        maxLevel = DiagLogLevel.NONE;\n    }\n    else if (maxLevel > DiagLogLevel.ALL) {\n        maxLevel = DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', DiagLogLevel.WARN),\n        info: _filterFunc('info', DiagLogLevel.INFO),\n        debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n//# sourceMappingURL=diag.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexport { BaggageImpl };\n//# sourceMappingURL=baggage-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    // eslint-disable-next-line no-console\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        // eslint-disable-next-line no-console\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, args);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexport { DiagConsoleLogger };\n//# sourceMappingURL=consoleLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createGauge}\n     */\n    NoopMeter.prototype.createGauge = function (_name, _options) {\n        return NOOP_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\nexport { NoopUpDownCounterMetric };\nvar NoopGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopGaugeMetric, _super);\n    function NoopGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };\n    return NoopGaugeMetric;\n}(NoopMetric));\nexport { NoopGaugeMetric };\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nexport var ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n//# sourceMappingURL=Metric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from './trace_flags';\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLink = function (_link) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLinks = function (_links) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan() {\n    return getSpan(ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexport { NoopTracerProvider };\n//# sourceMappingURL=NoopTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=tracestate-validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from './tracestate-validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceStateImpl = /** @class */ (function () {\n    function TraceStateImpl(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceStateImpl.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceStateImpl.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceStateImpl.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceStateImpl.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceStateImpl.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceStateImpl.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceStateImpl.prototype._clone = function () {\n        var traceState = new TraceStateImpl();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceStateImpl;\n}());\nexport { TraceStateImpl };\n//# sourceMappingURL=tracestate-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceStateImpl } from './tracestate-impl';\nexport function createTraceState(rawTraceState) {\n    return new TraceStateImpl(rawTraceState);\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER } from './NoopMeter';\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\nexport { NoopMeterProvider };\nexport var NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return registerGlobal(API_NAME, provider, DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n//# sourceMappingURL=metrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport var metrics = MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexport { NoopTextMapPropagator };\n//# sourceMappingURL=NoopTextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage() {\n    return getBaggage(ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, getActiveBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.getActiveBaggage = getActiveBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getActiveSpan = getActiveSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { baggageEntryMetadataFromString } from './baggage/utils';\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport { DiagLogLevel, } from './diag/types';\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { ValueType, } from './metrics/Metric';\n// Propagation APIs\nexport { defaultTextMapGetter, defaultTextMapSetter, } from './propagation/TextMapPropagator';\nexport { ProxyTracer } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { SamplingDecision } from './trace/SamplingResult';\nexport { SpanKind } from './trace/span_kind';\nexport { SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { createTraceState } from './trace/internal/utils';\nexport { isSpanContextValid, isValidTraceId, isValidSpanId, } from './trace/spancontext-utils';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, } from './trace/invalid-span-constants';\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n    context: context,\n    diag: diag,\n    metrics: metrics,\n    propagation: propagation,\n    trace: trace,\n};\n//# sourceMappingURL=index.js.map"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"mappings":"gEAiBW,EAAc,OAAO,YAAe,SAAW,WAAa,mFGD5D,EAAU,WCiBrB,SAAgB,EAAwB,EAAY,CAChD,IAAI,EAAmB,IAAI,IAAI,CAAC,IAC5B,EAAmB,IAAI,IACvB,EAAiB,EAAW,MAAM,GACtC,GAAI,CAAC,EAED,OAAO,UAAY,CAAE,MAAO,IAEhC,IAAI,EAAmB,CACnB,MAAO,CAAC,EAAe,GACvB,MAAO,CAAC,EAAe,GACvB,MAAO,CAAC,EAAe,GACvB,WAAY,EAAe,IAG/B,GAAI,EAAiB,YAAc,KAC/B,OAAO,SAAsB,EAAe,CACxC,OAAO,IAAkB,GAGjC,SAAS,EAAQ,EAAG,CAEhB,OADA,EAAiB,IAAI,GACd,GAEX,SAAS,EAAQ,EAAG,CAEhB,OADA,EAAiB,IAAI,GACd,GAEX,OAAO,SAAsB,EAAe,CACxC,GAAI,EAAiB,IAAI,GACrB,MAAO,GAEX,GAAI,EAAiB,IAAI,GACrB,MAAO,GAEX,IAAI,EAAqB,EAAc,MAAM,GAC7C,GAAI,CAAC,EAGD,OAAO,EAAQ,GAEnB,IAAI,EAAsB,CACtB,MAAO,CAAC,EAAmB,GAC3B,MAAO,CAAC,EAAmB,GAC3B,MAAO,CAAC,EAAmB,GAC3B,WAAY,EAAmB,IAoBnC,OAjBI,EAAoB,YAAc,MAIlC,EAAiB,QAAU,EAAoB,MACxC,EAAQ,GAEf,EAAiB,QAAU,EACvB,EAAiB,QAAU,EAAoB,OAC/C,EAAiB,OAAS,EAAoB,MACvC,EAAQ,GAEZ,EAAQ,GAEf,EAAiB,OAAS,EAAoB,MACvC,EAAQ,GAEZ,EAAQ,oCAlFnB,EAAK,gCAoGE,EAAe,EAAwB,MC/FlD,SAAgB,EAAe,EAAM,EAAU,EAAM,EAAe,CAChE,IAAI,EACA,IAAkB,IAAK,KAAK,EAAgB,IAChD,IAAI,EAAO,EAAQ,IAAiC,EAAK,EAAQ,KAAmC,KAA6B,CAC7H,QAAS,GAD+G,EAG5H,GAAI,CAAC,GAAiB,EAAI,GAAO,CAE7B,IAAI,EAAU,MAAM,gEAAkE,GAEtF,OADA,EAAK,MAAM,EAAI,OAAS,EAAI,SACrB,GAEX,GAAI,EAAI,UAAY,EAAS,CAEzB,IAAI,EAAU,MAAM,gDAAkD,EAAI,QAAU,QAAU,EAAO,8CAAgD,GAErJ,OADA,EAAK,MAAM,EAAI,OAAS,EAAI,SACrB,GAIX,MAFA,GAAI,GAAQ,EACZ,EAAK,MAAM,+CAAiD,EAAO,KAAO,EAAU,KAC7E,GAEX,SAAgB,EAAU,EAAM,CAC5B,IAAI,EAAI,EACJ,GAAiB,EAAK,EAAQ,KAAmC,KAAwB,IAAK,GAAI,EAAG,QACrG,MAAC,GAAiB,CAAC,EAAa,IAGpC,OAAQ,EAAK,EAAQ,KAAmC,KAAwB,IAAK,GAAI,EAAG,GAEhG,SAAgB,EAAiB,EAAM,EAAM,CACzC,EAAK,MAAM,kDAAoD,EAAO,KAAO,EAAU,KACvF,IAAI,EAAM,EAAQ,GACd,GACA,OAAO,EAAI,8CArCf,GAAQ,EAAQ,MAAM,KAAK,GAC3B,EAA+B,OAAO,IAAI,wBAA0B,IACpE,EAAU,KCwEd,SAAS,EAAS,EAAU,EAAW,EAAM,CACzC,IAAI,EAAS,EAAU,QAElB,KAIL,OADA,EAAK,QAAQ,GACN,EAAO,GAAU,MAAM,EAAQ0B,GAAc,GAAID,GAAO,GAAO,0CApFtEA,GAAkC,SAAU,EAAG,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,EAAE,OAAO,UACjD,GAAI,CAAC,EAAG,OAAO,EACf,IAAI,EAAI,EAAE,KAAK,GAAI,EAAG,EAAK,GAAI,EAC/B,GAAI,CACA,MAAQ,IAAM,IAAK,IAAK,KAAM,IAAM,EAAE,EAAI,EAAE,QAAQ,MAAM,EAAG,KAAK,EAAE,aAEjE,EAAO,CAAE,EAAI,CAAS,gBACrB,CACJ,GAAI,CACI,GAAK,CAAC,EAAE,OAAS,EAAI,EAAE,SAAY,EAAE,KAAK,UAE1C,CAAE,GAAI,EAAG,MAAM,EAAE,OAE7B,OAAO,GAEPC,GAAgD,SAAU,EAAI,EAAM,EAAM,CAC1E,GAAI,GAAQ,UAAU,SAAW,MAAQ,IAAI,EAAI,EAAG,EAAI,EAAK,OAAQ,EAAI,EAAI,EAAG,KACxE,GAAM,EAAE,KAAK,MACR,IAAI,EAAK,MAAM,UAAU,MAAM,KAAK,EAAM,EAAG,IAClD,EAAG,GAAK,EAAK,IAGrB,OAAO,EAAG,OAAO,GAAM,MAAM,UAAU,MAAM,KAAK,KAYlD,GAAqC,UAAY,CACjD,SAASvB,EAAoB,EAAO,CAChC,KAAK,WAAa,EAAM,WAAa,sBAqCzC,MAnCA,GAAoB,UAAU,MAAQ,UAAY,CAEzC,IADD,iBAIJ,OAAO,EAAS,QAAS,KAAK,WAAY,IAE9C,EAAoB,UAAU,MAAQ,UAAY,CAEzC,IADD,iBAIJ,OAAO,EAAS,QAAS,KAAK,WAAY,IAE9C,EAAoB,UAAU,KAAO,UAAY,CAExC,IADD,iBAIJ,OAAO,EAAS,OAAQ,KAAK,WAAY,IAE7C,EAAoB,UAAU,KAAO,UAAY,CAExC,IADD,iBAIJ,OAAO,EAAS,OAAQ,KAAK,WAAY,IAE7C,EAAoB,UAAU,QAAU,UAAY,CAE3C,IADD,iBAIJ,OAAO,EAAS,UAAW,KAAK,WAAY,IAEzCA,+BCpEV,SAAU,EAAc,CAErB,EAAa,EAAa,KAAU,GAAK,OAEzC,EAAa,EAAa,MAAW,IAAM,QAE3C,EAAa,EAAa,KAAU,IAAM,OAE1C,EAAa,EAAa,KAAU,IAAM,OAE1C,EAAa,EAAa,MAAW,IAAM,QAK3C,EAAa,EAAa,QAAa,IAAM,UAE7C,EAAa,EAAa,IAAS,MAAQ,QAC5C,IAAiB,EAAe,QCvBnC,SAAgB,GAAyB,EAAU,EAAQ,CACnD,EAAW,EAAa,KACxB,EAAW,EAAa,KAEnB,EAAW,EAAa,MAC7B,EAAW,EAAa,KAG5B,EAAS,GAAU,GACnB,SAAS,EAAY,EAAU,EAAU,CACrC,IAAI,EAAU,EAAO,GAIrB,OAHI,OAAO,GAAY,YAAc,GAAY,EACtC,EAAQ,KAAK,GAEjB,UAAY,GAEvB,MAAO,CACH,MAAO,EAAY,QAAS,EAAa,OACzC,KAAM,EAAY,OAAQ,EAAa,MACvC,KAAM,EAAY,OAAQ,EAAa,MACvC,MAAO,EAAY,QAAS,EAAa,OACzC,QAAS,EAAY,UAAW,EAAa,2FCtBjDsB,GAAkC,SAAU,EAAG,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,EAAE,OAAO,UACjD,GAAI,CAAC,EAAG,OAAO,EACf,IAAI,EAAI,EAAE,KAAK,GAAI,EAAG,EAAK,GAAI,EAC/B,GAAI,CACA,MAAQ,IAAM,IAAK,IAAK,KAAM,IAAM,EAAE,EAAI,EAAE,QAAQ,MAAM,EAAG,KAAK,EAAE,aAEjE,EAAO,CAAE,EAAI,CAAS,gBACrB,CACJ,GAAI,CACI,GAAK,CAAC,EAAE,OAAS,EAAI,EAAE,SAAY,EAAE,KAAK,UAE1C,CAAE,GAAI,EAAG,MAAM,EAAE,OAE7B,OAAO,GAEPC,GAAgD,SAAU,EAAI,EAAM,EAAM,CAC1E,GAAI,GAAQ,UAAU,SAAW,MAAQ,IAAI,EAAI,EAAG,EAAI,EAAK,OAAQ,EAAI,EAAI,EAAG,KACxE,GAAM,EAAE,KAAK,MACR,IAAI,EAAK,MAAM,UAAU,MAAM,KAAK,EAAM,EAAG,IAClD,EAAG,GAAK,EAAK,IAGrB,OAAO,EAAG,OAAO,GAAM,MAAM,UAAU,MAAM,KAAK,KAMlDoB,GAAW,OAKX,EAAyB,UAAY,CAKrC,SAASvC,GAAU,CACf,SAAS,EAAU,EAAU,CACzB,OAAO,UAAY,CAEV,IADD,iBAIA,EAAS,EAAU,QAElB,KAEL,OAAO,EAAO,GAAU,MAAM,EAAQmB,GAAc,GAAID,GAAO,GAAO,MAI9E,IAAI,EAAO,KAEP,EAAY,SAAU,EAAQ,EAAmB,CACjD,IAAI,EAAI,EAAI,EAEZ,GADI,IAAsB,IAAK,KAAK,EAAoB,CAAE,SAAU,EAAa,OAC7E,IAAW,EAAM,CAIjB,IAAI,EAAU,MAAM,sIAEpB,OADA,EAAK,OAAO,EAAK,EAAI,QAAW,KAA6B,EAAI,QAAT,GACjD,GAEP,OAAO,GAAsB,WAC7B,EAAoB,CAChB,SAAU,IAGlB,IAAI,EAAY,EAAU,QACtB,EAAY,IAA0B,EAAK,EAAkB,WAAc,KAA6B,EAAa,KAAlB,EAAwB,GAE/H,GAAI,GAAa,CAAC,EAAkB,wBAAyB,CACzD,IAAI,GAAS,EAAS,QAAQ,QAAW,KAA6B,kCAAL,EACjE,EAAU,KAAK,2CAA6C,GAC5D,EAAU,KAAK,6DAA+D,GAElF,OAAO,EAAe,OAAQ,EAAW,EAAM,KAEnD,EAAK,UAAY,EACjB,EAAK,QAAU,UAAY,CACvB,EAAiBqB,GAAU,IAE/B,EAAK,sBAAwB,SAAU,EAAS,CAC5C,OAAO,IAAI,GAAoB,IAEnC,EAAK,QAAU,EAAU,WACzB,EAAK,MAAQ,EAAU,SACvB,EAAK,KAAO,EAAU,QACtB,EAAK,KAAO,EAAU,QACtB,EAAK,MAAQ,EAAU,SAS3B,MANA,GAAQ,SAAW,UAAY,CAI3B,OAHK,KAAK,YACN,KAAK,UAAY,IAAIvC,GAElB,KAAK,WAETA,qCCtGPkB,GAAkC,SAAU,EAAG,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,EAAE,OAAO,UACjD,GAAI,CAAC,EAAG,OAAO,EACf,IAAI,EAAI,EAAE,KAAK,GAAI,EAAG,EAAK,GAAI,EAC/B,GAAI,CACA,MAAQ,IAAM,IAAK,IAAK,KAAM,IAAM,EAAE,EAAI,EAAE,QAAQ,MAAM,EAAG,KAAK,EAAE,aAEjE,EAAO,CAAE,EAAI,CAAS,gBACrB,CACJ,GAAI,CACI,GAAK,CAAC,EAAE,OAAS,EAAI,EAAE,SAAY,EAAE,KAAK,UAE1C,CAAE,GAAI,EAAG,MAAM,EAAE,OAE7B,OAAO,GAEP,GAAsC,SAAS,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,OAAO,SAAU,EAAI,GAAK,EAAE,GAAI,EAAI,EAC5E,GAAI,EAAG,OAAO,EAAE,KAAK,GACrB,GAAI,GAAK,OAAO,EAAE,QAAW,SAAU,MAAO,CAC1C,KAAM,UAAY,CAEd,OADI,GAAK,GAAK,EAAE,SAAQ,EAAI,IAAK,IAC1B,CAAE,MAAO,GAAK,EAAE,KAAM,KAAM,CAAC,KAG5C,MAAU,UAAU,EAAI,0BAA4B,oCAEpD,GAA6B,UAAY,CACzC,SAAShB,EAAY,EAAS,CAC1B,KAAK,SAAW,EAAU,IAAI,IAAI,GAAW,IAAI,IAkDrD,MAhDA,GAAY,UAAU,SAAW,SAAU,EAAK,CAC5C,IAAI,EAAQ,KAAK,SAAS,IAAI,GACzB,KAGL,OAAO,OAAO,OAAO,GAAI,IAE7B,EAAY,UAAU,cAAgB,UAAY,CAC9C,OAAO,MAAM,KAAK,KAAK,SAAS,WAAW,IAAI,SAAU,EAAI,CACzD,IAAI,EAAKgB,GAAO,EAAI,GAAI,EAAI,EAAG,GAAI,EAAI,EAAG,GAC1C,MAAO,CAAC,EAAG,MAGnB,EAAY,UAAU,SAAW,SAAU,EAAK,EAAO,CACnD,IAAI,EAAa,IAAIhB,EAAY,KAAK,UAEtC,OADA,EAAW,SAAS,IAAI,EAAK,GACtB,GAEX,EAAY,UAAU,YAAc,SAAU,EAAK,CAC/C,IAAI,EAAa,IAAIA,EAAY,KAAK,UAEtC,OADA,EAAW,SAAS,OAAO,GACpB,GAEX,EAAY,UAAU,cAAgB,UAAY,CAG9C,IAAK,IAFD,EAAK,EACL,EAAO,GACF,EAAK,EAAG,EAAK,UAAU,OAAQ,IACpC,EAAK,GAAM,UAAU,GAEzB,IAAI,EAAa,IAAIA,EAAY,KAAK,UACtC,GAAI,CACA,IAAK,IAAI,EAAS,GAAS,GAAO,EAAW,EAAO,OAAQ,CAAC,EAAS,KAAM,EAAW,EAAO,OAAQ,CAClG,IAAI,EAAM,EAAS,MACnB,EAAW,SAAS,OAAO,UAG5B,EAAO,CAAE,EAAM,CAAE,MAAO,UACvB,CACJ,GAAI,CACI,GAAY,CAAC,EAAS,OAAS,EAAK,EAAO,SAAS,EAAG,KAAK,UAE5D,CAAE,GAAI,EAAK,MAAM,EAAI,OAEjC,OAAO,GAEX,EAAY,UAAU,MAAQ,UAAY,CACtC,OAAO,IAAIA,GAERA,+BC5EA,GAA6B,OAAO,2BCM/C,SAAgB,GAAc,EAAS,CAEnC,OADI,IAAY,IAAK,KAAK,EAAU,IAC7B,IAAI,GAAY,IAAI,IAAI,OAAO,QAAQ,KAQlD,SAAgB,GAA+B,EAAK,CAKhD,OAJI,OAAO,GAAQ,WACf,GAAK,MAAM,qDAAuD,OAAO,GACzE,EAAM,IAEH,CACH,SAAU,GACV,SAAU,UAAY,CAClB,OAAO,6CAxBfC,GAAO,EAAQ,cCFnB,SAAgB,EAAiB,EAAa,CAO1C,OAAO,OAAO,IAAI,+BAElB,GAA6B,UAAY,CAMzC,SAASC,EAAY,EAAe,CAEhC,IAAI,EAAO,KACX,EAAK,gBAAkB,EAAgB,IAAI,IAAI,GAAiB,IAAI,IACpE,EAAK,SAAW,SAAU,EAAK,CAAE,OAAO,EAAK,gBAAgB,IAAI,IACjE,EAAK,SAAW,SAAU,EAAK,EAAO,CAClC,IAAIqC,EAAU,IAAIrC,EAAY,EAAK,iBAEnC,OADA,EAAQ,gBAAgB,IAAI,EAAK,GAC1BqC,GAEX,EAAK,YAAc,SAAU,EAAK,CAC9B,IAAIA,EAAU,IAAIrC,EAAY,EAAK,iBAEnC,OADA,EAAQ,gBAAgB,OAAO,GACxBqC,GAGf,OAAOrC,KAGA,EAAe,IAAI,+BCnC1B,EAAa,CACb,CAAE,EAAG,QAAS,EAAG,SACjB,CAAE,EAAG,OAAQ,EAAG,QAChB,CAAE,EAAG,OAAQ,EAAG,QAChB,CAAE,EAAG,QAAS,EAAG,SACjB,CAAE,EAAG,UAAW,EAAG,UAOnB,GAAmC,UAAY,CAC/C,SAASE,GAAoB,CACzB,SAAS,EAAa,EAAU,CAC5B,OAAO,UAAY,CAEV,IADD,iBAIJ,GAAI,QAAS,CAGT,IAAI,EAAU,QAAQ,GAOtB,GANI,OAAO,GAAY,aAGnB,EAAU,QAAQ,KAGlB,OAAO,GAAY,WACnB,OAAO,EAAQ,MAAM,QAAS,KAK9C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,OAAQ,IACnC,KAAK,EAAW,GAAG,GAAK,EAAa,EAAW,GAAG,GAG3D,OAAOA,QC0HX,SAAgB,IAAkB,CAC9B,OAAO,+EAnKP,GAAyC,UAAY,CACrD,IAAI,EAAgB,SAAU,EAAG,EAAG,CAIhC,MAHA,GAAgB,OAAO,gBAClB,CAAE,UAAW,cAAgB,OAAS,SAAU,EAAG,EAAG,CAAE,EAAE,UAAYC,IACvE,SAAU,EAAG,EAAG,CAAE,IAAK,IAAI,KAAKA,EAAO,OAAO,UAAU,eAAe,KAAKA,EAAG,KAAI,EAAE,GAAKA,EAAE,KACzF,EAAc,EAAG,IAE5B,OAAO,SAAU,EAAG,EAAG,CACnB,GAAI,OAAO,GAAM,YAAc,IAAM,KACjC,MAAU,UAAU,uBAAyB,OAAO,GAAK,iCAC7D,EAAc,EAAG,GACjB,SAAS,GAAK,CAAE,KAAK,YAAc,EACnC,EAAE,UAAY,IAAM,KAAO,OAAO,OAAO,IAAM,EAAG,UAAY,EAAE,UAAW,IAAI,QAOnF,GAA2B,UAAY,CACvC,SAASC,GAAY,EAoDrB,MA/CA,GAAU,UAAU,YAAc,SAAU,EAAO,EAAU,CACzD,OAAO,IAKX,EAAU,UAAU,gBAAkB,SAAU,EAAO,EAAU,CAC7D,OAAO,IAKX,EAAU,UAAU,cAAgB,SAAU,EAAO,EAAU,CAC3D,OAAO,IAKX,EAAU,UAAU,oBAAsB,SAAU,EAAO,EAAU,CACjE,OAAO,IAKX,EAAU,UAAU,sBAAwB,SAAU,EAAO,EAAU,CACnE,OAAO,IAKX,EAAU,UAAU,wBAA0B,SAAU,EAAO,EAAU,CACrE,OAAO,IAKX,EAAU,UAAU,8BAAgC,SAAU,EAAO,EAAU,CAC3E,OAAO,IAKX,EAAU,UAAU,2BAA6B,SAAU,EAAW,EAAc,GAIpF,EAAU,UAAU,8BAAgC,SAAU,EAAW,GAClEA,KAGP,EAA4B,UAAY,CACxC,SAASC,GAAa,EAEtB,OAAOA,KAGP,GAAmC,SAAU,EAAQ,CACrD,EAAUC,EAAmB,GAC7B,SAASA,GAAoB,CACzB,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAG/D,MADA,GAAkB,UAAU,IAAM,SAAU,EAAQ,EAAa,GAC1DA,GACT,GAEE,GAAyC,SAAU,EAAQ,CAC3D,EAAUC,EAAyB,GACnC,SAASA,GAA0B,CAC/B,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAG/D,MADA,GAAwB,UAAU,IAAM,SAAU,EAAQ,EAAa,GAChEA,GACT,GAEE,GAAiC,SAAU,EAAQ,CACnD,EAAUC,EAAiB,GAC3B,SAASA,GAAkB,CACvB,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAG/D,MADA,GAAgB,UAAU,OAAS,SAAU,EAAQ,EAAa,GAC3DA,GACT,GAEE,GAAqC,SAAU,EAAQ,CACvD,EAAUC,EAAqB,GAC/B,SAASA,GAAsB,CAC3B,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAG/D,MADA,GAAoB,UAAU,OAAS,SAAU,EAAQ,EAAa,GAC/DA,GACT,GAEE,EAAsC,UAAY,CAClD,SAASC,GAAuB,EAIhC,MAFA,GAAqB,UAAU,YAAc,SAAU,EAAW,GAClE,EAAqB,UAAU,eAAiB,SAAU,EAAW,GAC9DA,KAGP,GAA6C,SAAU,EAAQ,CAC/D,EAAUC,EAA6B,GACvC,SAASA,GAA8B,CACnC,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAE/D,OAAOA,GACT,GAEE,GAA2C,SAAU,EAAQ,CAC7D,EAAUC,EAA2B,GACrC,SAASA,GAA4B,CACjC,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAE/D,OAAOA,GACT,GAEE,GAAmD,SAAU,EAAQ,CACrE,EAAUC,EAAmC,GAC7C,SAASA,GAAoC,CACzC,OAAO,IAAW,MAAQ,EAAO,MAAM,KAAM,YAAc,KAE/D,OAAOA,GACT,GAES,EAAa,IAAI,GAEjB,GAAsB,IAAI,GAC1B,GAAoB,IAAI,GACxB,GAAwB,IAAI,GAC5B,GAA8B,IAAI,GAElC,GAAiC,IAAI,GACrC,GAA+B,IAAI,GACnC,GAAyC,IAAI,8BC5JvD,SAAU,EAAW,CAClB,EAAU,EAAU,IAAS,GAAK,MAClC,EAAU,EAAU,OAAY,GAAK,WACtC,KAAc,GAAY,gCCLlB,EAAuB,CAC9B,IAAK,SAAU,EAAS,EAAK,CACrB,MAAW,KAGf,OAAO,EAAQ,IAEnB,KAAM,SAAU,EAAS,CAIrB,OAHI,GAAW,KACJ,GAEJ,OAAO,KAAK,KAGhB,EAAuB,CAC9B,IAAK,SAAU,EAAS,EAAK,EAAO,CAC5B,GAAW,OAGf,EAAQ,GAAO,yCCnBnBC,GAAkC,SAAU,EAAG,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,EAAE,OAAO,UACjD,GAAI,CAAC,EAAG,OAAO,EACf,IAAI,EAAI,EAAE,KAAK,GAAI,EAAG,EAAK,GAAI,EAC/B,GAAI,CACA,MAAQ,IAAM,IAAK,IAAK,KAAM,IAAM,EAAE,EAAI,EAAE,QAAQ,MAAM,EAAG,KAAK,EAAE,aAEjE,EAAO,CAAE,EAAI,CAAS,gBACrB,CACJ,GAAI,CACI,GAAK,CAAC,EAAE,OAAS,EAAI,EAAE,SAAY,EAAE,KAAK,UAE1C,CAAE,GAAI,EAAG,MAAM,EAAE,OAE7B,OAAO,GAEPC,GAAgD,SAAU,EAAI,EAAM,EAAM,CAC1E,GAAI,GAAQ,UAAU,SAAW,MAAQ,IAAI,EAAI,EAAG,EAAI,EAAK,OAAQ,EAAI,EAAI,EAAG,KACxE,GAAM,EAAE,KAAK,MACR,IAAI,EAAK,MAAM,UAAU,MAAM,KAAK,EAAM,EAAG,IAClD,EAAG,GAAK,EAAK,IAGrB,OAAO,EAAG,OAAO,GAAM,MAAM,UAAU,MAAM,KAAK,KAGlD,GAAoC,UAAY,CAChD,SAASC,GAAqB,EAqB9B,MAnBA,GAAmB,UAAU,OAAS,UAAY,CAC9C,OAAO,GAEX,EAAmB,UAAU,KAAO,SAAU,EAAU,EAAI,EAAS,CAE5D,IADD,0BAIJ,OAAO,EAAG,KAAK,MAAM,EAAID,GAAc,CAAC,GAAUD,GAAO,GAAO,MAEpE,EAAmB,UAAU,KAAO,SAAU,EAAU,EAAQ,CAC5D,OAAO,GAEX,EAAmB,UAAU,OAAS,UAAY,CAC9C,OAAO,MAEX,EAAmB,UAAU,QAAU,UAAY,CAC/C,OAAO,MAEJE,qDChDP,GAAkC,SAAU,EAAG,EAAG,CAClD,IAAI,EAAI,OAAO,QAAW,YAAc,EAAE,OAAO,UACjD,GAAI,CAAC,EAAG,OAAO,EACf,IAAI,EAAI,EAAE,KAAK,GAAI,EAAG,EAAK,GAAI,EAC/B,GAAI,CACA,MAAQ,IAAM,IAAK,IAAK,KAAM,IAAM,EAAE,EAAI,EAAE,QAAQ,MAAM,EAAG,KAAK,EAAE,aAEjE,EAAO,CAAE,EAAI,CAAS,gBACrB,CACJ,GAAI,CACI,GAAK,CAAC,EAAE,OAAS,EAAI,EAAE,SAAY,EAAE,KAAK,UAE1C,CAAE,GAAI,EAAG,MAAM,EAAE,OAE7B,OAAO,GAEP,GAAgD,SAAU,EAAI,EAAM,EAAM,CAC1E,GAAI,GAAQ,UAAU,SAAW,MAAQ,IAAI,EAAI,EAAG,EAAI,EAAK,OAAQ,EAAI,EAAI,EAAG,KACxE,GAAM,EAAE,KAAK,MACR,IAAI,EAAK,MAAM,UAAU,MAAM,KAAK,EAAM,EAAG,IAClD,EAAG,GAAK,EAAK,IAGrB,OAAO,EAAG,OAAO,GAAM,MAAM,UAAU,MAAM,KAAK,KAKlDmB,EAAW,UACX,GAAuB,IAAI,GAI3B,EAA4B,UAAY,CAExC,SAASjB,GAAa,EAwDtB,MArDA,GAAW,YAAc,UAAY,CAIjC,OAHK,KAAK,YACN,KAAK,UAAY,IAAIA,GAElB,KAAK,WAOhB,EAAW,UAAU,wBAA0B,SAAU,EAAgB,CACrE,OAAO,EAAeiB,EAAU,EAAgB,EAAQ,aAK5D,EAAW,UAAU,OAAS,UAAY,CACtC,OAAO,KAAK,qBAAqB,UAUrC,EAAW,UAAU,KAAO,SAAU,EAAS,EAAI,EAAS,CAGxD,IAAK,IAFD,EACA,EAAO,GACF,EAAK,EAAG,EAAK,UAAU,OAAQ,IACpC,EAAK,EAAK,GAAK,UAAU,GAE7B,OAAQ,EAAK,KAAK,sBAAsB,KAAK,MAAM,EAAI,GAAc,CAACE,EAAS,EAAI,GAAU,GAAO,GAAO,MAQ/G,EAAW,UAAU,KAAO,SAAU,EAAS,EAAQ,CACnD,OAAO,KAAK,qBAAqB,KAAKA,EAAS,IAEnD,EAAW,UAAU,mBAAqB,UAAY,CAClD,OAAO,EAAUF,IAAa,IAGlC,EAAW,UAAU,QAAU,UAAY,CACvC,KAAK,qBAAqB,UAC1B,EAAiBA,EAAU,EAAQ,aAEhCjB,+BC1FV,SAAU,EAAY,CAEnB,EAAW,EAAW,KAAU,GAAK,OAErC,EAAW,EAAW,QAAa,GAAK,YACzC,IAAe,EAAa,wCCLpB,EAAiB,mBACjB,EAAkB,mCAClB,GAAuB,CAC9B,QAAS,EACT,OAAQ,EACR,WAAY,EAAW,oCCAvB,EAAkC,UAAY,CAC9C,SAASE,EAAiB,EAAc,CAChC,IAAiB,IAAK,KAAK,EAAe,IAC9C,KAAK,aAAe,EAwCxB,MArCA,GAAiB,UAAU,YAAc,UAAY,CACjD,OAAO,KAAK,cAGhB,EAAiB,UAAU,aAAe,SAAU,EAAM,EAAQ,CAC9D,OAAO,MAGX,EAAiB,UAAU,cAAgB,SAAU,EAAa,CAC9D,OAAO,MAGX,EAAiB,UAAU,SAAW,SAAU,EAAO,EAAa,CAChE,OAAO,MAEX,EAAiB,UAAU,QAAU,SAAU,EAAO,CAClD,OAAO,MAEX,EAAiB,UAAU,SAAW,SAAU,EAAQ,CACpD,OAAO,MAGX,EAAiB,UAAU,UAAY,SAAU,EAAS,CACtD,OAAO,MAGX,EAAiB,UAAU,WAAa,SAAU,EAAO,CACrD,OAAO,MAGX,EAAiB,UAAU,IAAM,SAAU,EAAU,GAErD,EAAiB,UAAU,YAAc,UAAY,CACjD,MAAO,IAGX,EAAiB,UAAU,gBAAkB,SAAU,EAAY,EAAO,GACnEA,QCrCX,SAAgB,EAAQ,EAAS,CAC7B,OAAOiB,EAAQ,SAAS,IAAa,IAAA,GAKzC,SAAgB,IAAgB,CAC5B,OAAO,EAAQ,EAAW,cAAc,UAQ5C,SAAgB,EAAQ,EAAS,EAAM,CACnC,OAAOA,EAAQ,SAAS,EAAU,GAOtC,SAAgB,GAAW,EAAS,CAChC,OAAOA,EAAQ,YAAY,GAS/B,SAAgB,GAAe,EAAS,EAAa,CACjD,OAAO,EAAQA,EAAS,IAAI,EAAiB,IAOjD,SAAgB,GAAe,EAAS,CACpC,IAAI,EACJ,OAAQ,EAAK,EAAQA,KAAc,KAAwB,IAAK,GAAI,EAAG,qDAjDvE,EAAW,EAAiB,qCCFhC,SAAgB,GAAe,EAAS,CACpC,OAAO,GAAoB,KAAK,IAAY,IAAY,EAE5D,SAAgB,GAAc,EAAQ,CAClC,OAAO,GAAmB,KAAK,IAAW,IAAW,EAMzD,SAAgB,EAAmB,EAAa,CAC5C,OAAQ,GAAe,EAAY,UAAY,GAAc,EAAY,QAQ7E,SAAgB,GAAgB,EAAa,CACzC,OAAO,IAAI,EAAiB,0CAtB5B,GAAsB,oBACtB,GAAqB,qBCmDzB,SAAS,GAAc,EAAa,CAChC,OAAQ,OAAO,GAAgB,UAC3B,OAAO,EAAY,QAAc,UACjC,OAAO,EAAY,SAAe,UAClC,OAAO,EAAY,YAAkB,uDAtDzC,EAAa,EAAW,cAIxB,EAA4B,UAAY,CACxC,SAASf,GAAa,EA0CtB,MAvCA,GAAW,UAAU,UAAY,SAAU,EAAM,EAAS,EAAS,CAC3De,IAAY,IAAK,KAAK,EAAU,EAAW,UAC/C,IAAI,EAAO,GAAQ,GAAY,MAAsC,EAAQ,MAC7E,GAAI,EACA,OAAO,IAAI,EAEf,IAAI,EAAoBA,GAAW,GAAeA,GAM9C,OALA,GAAc,IACd,EAAmB,GACZ,IAAI,EAAiB,GAGrB,IAAI,GAGnB,EAAW,UAAU,gBAAkB,SAAU,EAAM,EAAM,EAAM,EAAM,CACrE,IAAI,EACA,EACA,EACA,eAAU,OAAS,IAGd,UAAU,SAAW,EAC1B,EAAK,EAEA,UAAU,SAAW,GAC1B,EAAO,EACP,EAAK,IAGL,EAAO,EACP,EAAM,EACN,EAAK,GAET,IAAI,EAAgB,GAAQ,KAA+B,EAAW,SAAjB,EACjD,EAAO,KAAK,UAAU,EAAM,EAAM,GAClC,EAAqB,EAAQ,EAAe,GAChD,OAAO,EAAW,KAAK,EAAoB,EAAI,IAAA,GAAW,KAEvDf,sCClDP,GAAc,IAAI,EAIlB,EAA6B,UAAY,CACzC,SAASE,EAAY,EAAW,EAAM,EAAS,EAAS,CACpD,KAAK,UAAY,EACjB,KAAK,KAAO,EACZ,KAAK,QAAU,EACf,KAAK,QAAU,EAwBnB,MAtBA,GAAY,UAAU,UAAY,SAAU,EAAM,EAAS,EAAS,CAChE,OAAO,KAAK,aAAa,UAAU,EAAM,EAASa,IAEtD,EAAY,UAAU,gBAAkB,SAAU,EAAO,EAAU,EAAU,EAAK,CAC9E,IAAI,EAAS,KAAK,aAClB,OAAO,QAAQ,MAAM,EAAO,gBAAiB,EAAQ,YAMzD,EAAY,UAAU,WAAa,UAAY,CAC3C,GAAI,KAAK,UACL,OAAO,KAAK,UAEhB,IAAI,EAAS,KAAK,UAAU,kBAAkB,KAAK,KAAM,KAAK,QAAS,KAAK,SAK5E,OAJK,GAGL,KAAK,UAAY,EACV,KAAK,WAHD,IAKRb,oCC3BP,GAAoC,UAAY,CAChD,SAASE,GAAqB,EAK9B,MAHA,GAAmB,UAAU,UAAY,SAAU,EAAO,EAAU,EAAU,CAC1E,OAAO,IAAI,GAERA,2CCXP,GAAuB,IAAI,GAS3B,EAAqC,UAAY,CACjD,SAASC,GAAsB,EAuB/B,MAlBA,GAAoB,UAAU,UAAY,SAAU,EAAM,EAAS,EAAS,CACxE,IAAI,EACJ,OAAS,EAAK,KAAK,kBAAkB,EAAM,EAAS,KAAc,KAA6B,IAAI,EAAY,KAAM,EAAM,EAAS,GAA1C,GAE9F,EAAoB,UAAU,YAAc,UAAY,CACpD,IAAI,EACJ,OAAQ,EAAK,KAAK,YAAe,KAA6B,GAAL,GAK7D,EAAoB,UAAU,YAAc,SAAU,EAAU,CAC5D,KAAK,UAAY,GAErB,EAAoB,UAAU,kBAAoB,SAAU,EAAM,EAAS,EAAS,CAChF,IAAI,EACJ,OAAQ,EAAK,KAAK,YAAe,KAAwB,IAAK,GAAI,EAAG,UAAU,EAAM,EAAS,IAE3FA,+BC7BV,SAAU,EAAkB,CAKzB,EAAiB,EAAiB,WAAgB,GAAK,aAKvD,EAAiB,EAAiB,OAAY,GAAK,SAKnD,EAAiB,EAAiB,mBAAwB,GAAK,uBAChE,IAAqB,EAAmB,+BCrB1C,SAAU,EAAU,CAEjB,EAAS,EAAS,SAAc,GAAK,WAKrC,EAAS,EAAS,OAAY,GAAK,SAKnC,EAAS,EAAS,OAAY,GAAK,SAMnC,EAAS,EAAS,SAAc,GAAK,WAMrC,EAAS,EAAS,SAAc,GAAK,aACtC,IAAa,EAAW,+BCrC1B,SAAU,EAAgB,CAIvB,EAAe,EAAe,MAAW,GAAK,QAK9C,EAAe,EAAe,GAAQ,GAAK,KAI3C,EAAe,EAAe,MAAW,GAAK,UAC/C,IAAmB,EAAiB,QCWvC,SAAgB,GAAY,EAAK,CAC7B,OAAO,GAAgB,KAAK,GAMhC,SAAgB,GAAc,EAAO,CACjC,OAAQ,GAAuB,KAAK,IAChC,CAAC,GAAgC,KAAK,4CAvB1C,EAAuB,eACvB,GAAY,QAAU,EAAuB,UAC7C,GAAmB,WAAa,EAAuB,gBAAkB,EAAuB,SAChG,GAAsB,OAAO,OAAS,GAAY,IAAM,GAAmB,MAC3E,GAAyB,sBACzB,GAAkC,iDCJlC,GAAwB,GACxB,GAAsB,IACtB,GAAyB,IACzB,GAAiC,IAUjC,GAAgC,UAAY,CAC5C,SAASC,EAAe,EAAe,CACnC,KAAK,eAAiB,IAAI,IACtB,GACA,KAAK,OAAO,GAiEpB,MA/DA,GAAe,UAAU,IAAM,SAAU,EAAK,EAAO,CAGjD,IAAI,EAAa,KAAK,SAKtB,OAJI,EAAW,eAAe,IAAI,IAC9B,EAAW,eAAe,OAAO,GAErC,EAAW,eAAe,IAAI,EAAK,GAC5B,GAEX,EAAe,UAAU,MAAQ,SAAU,EAAK,CAC5C,IAAI,EAAa,KAAK,SAEtB,OADA,EAAW,eAAe,OAAO,GAC1B,GAEX,EAAe,UAAU,IAAM,SAAU,EAAK,CAC1C,OAAO,KAAK,eAAe,IAAI,IAEnC,EAAe,UAAU,UAAY,UAAY,CAC7C,IAAI,EAAQ,KACZ,OAAO,KAAK,QACP,OAAO,SAAU,EAAK,EAAK,CAE5B,OADA,EAAI,KAAK,EAAM,GAAiC,EAAM,IAAI,IACnD,GACR,IACE,KAAK,KAEd,EAAe,UAAU,OAAS,SAAU,EAAe,CACnD,EAAc,OAAS,KAE3B,KAAK,eAAiB,EACjB,MAAM,IACN,UACA,OAAO,SAAU,EAAK,EAAM,CAC7B,IAAI,EAAa,EAAK,OAClB,EAAI,EAAW,QAAQ,IAC3B,GAAI,IAAM,GAAI,CACV,IAAI,EAAM,EAAW,MAAM,EAAG,GAC1B,EAAQ,EAAW,MAAM,EAAI,EAAG,EAAK,QACrC,GAAY,IAAQ,GAAc,IAClC,EAAI,IAAI,EAAK,GAMrB,OAAO,GACR,IAAI,KAEH,KAAK,eAAe,KAAO,KAC3B,KAAK,eAAiB,IAAI,IAAI,MAAM,KAAK,KAAK,eAAe,WACxD,UACA,MAAM,EAAG,QAGtB,EAAe,UAAU,MAAQ,UAAY,CACzC,OAAO,MAAM,KAAK,KAAK,eAAe,QAAQ,WAElD,EAAe,UAAU,OAAS,UAAY,CAC1C,IAAI,EAAa,IAAIA,EAErB,MADA,GAAW,eAAiB,IAAI,IAAI,KAAK,gBAClC,GAEJA,QClFX,SAAgB,GAAiB,EAAe,CAC5C,OAAO,IAAI,GAAe,8DCEnB,GAAU,EAAW,4CCKrB,GAAO,EAAQ,6CCJtB,GAAmC,UAAY,CAC/C,SAASC,GAAoB,EAK7B,MAHA,GAAkB,UAAU,SAAW,SAAU,EAAO,EAAU,EAAU,CACxE,OAAO,GAEJA,KAGA,GAAsB,IAAI,4CCXjCM,EAAW,UAIX,GAA4B,UAAY,CAExC,SAASJ,GAAa,EAgCtB,MA7BA,GAAW,YAAc,UAAY,CAIjC,OAHK,KAAK,YACN,KAAK,UAAY,IAAIA,GAElB,KAAK,WAMhB,EAAW,UAAU,uBAAyB,SAAU,EAAU,CAC9D,OAAO,EAAeI,EAAU,EAAU,EAAQ,aAKtD,EAAW,UAAU,iBAAmB,UAAY,CAChD,OAAO,EAAUA,IAAa,IAKlC,EAAW,UAAU,SAAW,SAAU,EAAM,EAAS,EAAS,CAC9D,OAAO,KAAK,mBAAmB,SAAS,EAAM,EAAS,IAG3D,EAAW,UAAU,QAAU,UAAY,CACvC,EAAiBA,EAAU,EAAQ,aAEhCJ,oCCrCA,GAAU,GAAW,wCCD5B,GAAuC,UAAY,CACnD,SAASC,GAAwB,EAWjC,MARA,GAAsB,UAAU,OAAS,SAAU,EAAU,EAAU,GAEvE,EAAsB,UAAU,QAAU,SAAU,EAAS,EAAU,CACnE,OAAOK,GAEX,EAAsB,UAAU,OAAS,UAAY,CACjD,MAAO,IAEJL,QCHX,SAAgB,GAAW,EAAS,CAChC,OAAOK,EAAQ,SAAS,IAAgB,IAAA,GAO5C,SAAgB,IAAmB,CAC/B,OAAO,GAAW,EAAW,cAAc,UAQ/C,SAAgB,GAAW,EAAS,EAAS,CACzC,OAAOA,EAAQ,SAAS,EAAa,GAOzC,SAAgB,GAAc,EAAS,CACnC,OAAOA,EAAQ,YAAY,qCAjC3B,EAAc,EAAiB,wFCC/BF,EAAW,cACX,GAA2B,IAAI,GAI/B,GAAgC,UAAY,CAE5C,SAASC,GAAiB,CACtB,KAAK,cAAgB,GACrB,KAAK,WAAa,GAClB,KAAK,iBAAmB,GACxB,KAAK,WAAa,GAClB,KAAK,cAAgB,GAoDzB,MAjDA,GAAe,YAAc,UAAY,CAIrC,OAHK,KAAK,YACN,KAAK,UAAY,IAAIA,GAElB,KAAK,WAOhB,EAAe,UAAU,oBAAsB,SAAU,EAAY,CACjE,OAAO,EAAeD,EAAU,EAAY,EAAQ,aASxD,EAAe,UAAU,OAAS,SAAU,EAAS,EAAS,EAAQ,CAElE,OADI,IAAW,IAAK,KAAK,EAAS,GAC3B,KAAK,uBAAuB,OAAOE,EAAS,EAAS,IAShE,EAAe,UAAU,QAAU,SAAU,EAAS,EAAS,EAAQ,CAEnE,OADI,IAAW,IAAK,KAAK,EAAS,GAC3B,KAAK,uBAAuB,QAAQA,EAAS,EAAS,IAKjE,EAAe,UAAU,OAAS,UAAY,CAC1C,OAAO,KAAK,uBAAuB,UAGvC,EAAe,UAAU,QAAU,UAAY,CAC3C,EAAiBF,EAAU,EAAQ,aAEvC,EAAe,UAAU,qBAAuB,UAAY,CACxD,OAAO,EAAUA,IAAa,IAE3BC,oCClEA,GAAc,GAAe,gECCpC,EAAW,QAIX,GAA0B,UAAY,CAEtC,SAASE,GAAW,CAChB,KAAK,qBAAuB,IAAI,EAChC,KAAK,gBAAkB,GACvB,KAAK,mBAAqB,EAC1B,KAAK,WAAa,GAClB,KAAK,QAAU,EACf,KAAK,cAAgB,GACrB,KAAK,eAAiB,GACtB,KAAK,QAAU,EACf,KAAK,eAAiB,GAsC1B,MAnCA,GAAS,YAAc,UAAY,CAI/B,OAHK,KAAK,YACN,KAAK,UAAY,IAAIA,GAElB,KAAK,WAOhB,EAAS,UAAU,wBAA0B,SAAU,EAAU,CAC7D,IAAI,EAAU,EAAe,EAAU,KAAK,qBAAsB,EAAQ,YAI1E,OAHI,GACA,KAAK,qBAAqB,YAAY,GAEnC,GAKX,EAAS,UAAU,kBAAoB,UAAY,CAC/C,OAAO,EAAU,IAAa,KAAK,sBAKvC,EAAS,UAAU,UAAY,SAAU,EAAM,EAAS,CACpD,OAAO,KAAK,oBAAoB,UAAU,EAAM,IAGpD,EAAS,UAAU,QAAU,UAAY,CACrC,EAAiB,EAAU,EAAQ,YACnC,KAAK,qBAAuB,IAAI,GAE7BA,oCCtDA,GAAQ,GAAS,2vBC0Bb,CACF,WACH,QACG,WACI,eACN"}